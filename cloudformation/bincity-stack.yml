AWSTemplateFormatVersion: 2010-09-09
Description: BinCity AWS Stack

Parameters:

  ProjectName:
    Description: Used as a prefix for project resources. Can be up to 12 characters, lowercase letters (a-z) only.
    Type: String
    Default: bincity
    AllowedPattern: "^[a-z]{1,12}"
    ConstraintDescription: The ProjectName can by up to 12 characters, lowercase letters (a-z) only.
  AdminUserEmail:
    Description: E-mail of the administrator account to be created.
    Type: String
    AllowedPattern: "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$"
    ConstraintDescription: The AdminUserEmail must be a valid e-mail format.
  GitHubOAuthToken:
    Type: String
    NoEcho: true
    MinLength: 40
    MaxLength: 40
    AllowedPattern: '[a-z0-9]*'
  GitHubOwner:
    Type: String
    Default: OscarAC
    AllowedPattern: "[A-Za-z0-9-]+"
  GitHubRepo:
    Type: String
    Default: aws-bincity
    AllowedPattern: "[A-Za-z0-9-]+"
  GitHubBranch:
    Type: String
    Default: develop
    AllowedPattern: "[A-Za-z0-9-]+"

Conditions:
  IADRegion: !Equals [!Ref "AWS::Region", "us-east-1"]

Resources:

  # DynamoDB Table
  TBinCity:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TBinCity
      AttributeDefinitions:
        - AttributeName: key
          AttributeType: S        
        - AttributeName: building
          AttributeType: N     
      KeySchema:
        - AttributeName: key
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: building-index
          KeySchema:
            - AttributeName: building
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  # DynamoDB Role
  DynamoDbRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: DynamoDbPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:BatchPutItem'
                  - 'dynamodb:DescribeStream'
                  - 'dynamodb:GetRecords'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:ListStreams'
                  - 'dynamodb:DescribeStream'                  
                Resource: 
                  - 'arn:aws:dynamodb:*:*:table/TBinCity'
                  - 'arn:aws:dynamodb:*:*:table/TBinCity/index/*'
                  - 'arn:aws:dynamodb:*:*:table/TBinCity/stream/*'

  # Cognito SNS Role
  SNSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CognitoSNSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'sns:publish'
                Resource: '*'

  # Cognito User Pool
  UserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: !Ref ProjectName
      UsernameAttributes:
        - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailMessage: 'Your username is {username} and temporary password is {####}. '
          EmailSubject: Your temporary password
          SMSMessage: 'Your username is {username} and temporary password is {####}.'
        UnusedAccountValidityDays: 7
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage: 'Here is your verification code: {####}'
      EmailVerificationSubject: Your verification code
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true

  # Cognito UserPool Client
  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: !Ref ProjectName
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  # Cognito IdentityPool
  IdentityPool:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      IdentityPoolName: !Sub '${ProjectName}Identity'
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt 
            - UserPool
            - ProviderName
  
  # Cognito UnAuthorized Role
  CognitoUnAuthorizedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Policies:
        - PolicyName: CognitoUnauthorizedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                Resource: '*'

  # Cognito Authorized Role
  CognitoAuthorizedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: CognitoAuthorizedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'execute-api:Invoke'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:execute-api:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':'
                    - !Ref AppApi
                    - /*
  
  # Identity Pool Role Mapping
  IdentityPoolRoleMapping:
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt 
          - CognitoAuthorizedRole
          - Arn
        unauthenticated: !GetAtt 
          - CognitoUnAuthorizedRole
          - Arn
  
  InitialSystemAdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId:
        Ref: UserPool
      Username: !Ref AdminUserEmail
      DesiredDeliveryMediums:
      - EMAIL
      ForceAliasCreation: false
      UserAttributes:
      - Name: email
        Value: !Ref AdminUserEmail    

  # Gateway API
  AppApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Ref ProjectName
      Description: API used for Project requests
      FailOnWarnings: true
  
  # Gateway Resource
  ApartmentsApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !GetAtt 
        - AppApi
        - RootResourceId
      PathPart: apartments

  # API Authorizer
  ApiAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      AuthorizerResultTtlInSeconds: 300
      IdentitySource: method.request.header.Authorization
      Name: CognitoDefaultUserPoolAuthorizer
      ProviderARNs:
        - !GetAtt 
          - UserPool
          - Arn
      RestApiId: !Ref AppApi
      Type: COGNITO_USER_POOLS

  # Assets S3 Bucket
  AssetsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      MetricsConfigurations:
        - Id: AssetsBucket
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  # Assets S3 Bucket Policy
  AssetsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref AssetsBucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${AssetsBucket}/*'
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${AssetsBucketOriginAccessIdentity}'
    DependsOn:
      - AssetsBucketOriginAccessIdentity

  # Assets S3 Bucket CloudFront Access Identity
  AssetsBucketOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OriginAccessIdentity for ${AssetsBucket}'

  # Assets CloudFront Distribution
  # AssetsCDN:
  #   Type: 'AWS::CloudFront::Distribution'
  #   DependsOn:
  #     - AssetsBucketOriginAccessIdentity
  #   Properties:
  #     DistributionConfig:
  #       Enabled: true
  #       Comment: !Sub 'CDN for ${AssetsBucket}'
  #       DefaultRootObject: index.html
  #       Origins:
  #         - DomainName: !Join
  #             - ''
  #             - - !Sub '${AssetsBucket}.s3'
  #               - !If [IADRegion, '', !Sub '-${AWS::Region}']
  #               - '.amazonaws.com'
  #           Id: S3
  #           S3OriginConfig:
  #             OriginAccessIdentity: !Sub >-
  #               origin-access-identity/cloudfront/${AssetsBucketOriginAccessIdentity}
  #       DefaultCacheBehavior:
  #         TargetOriginId: S3
  #         ViewerProtocolPolicy: https-only
  #         ForwardedValues:
  #           QueryString: 'false'
  #       CustomErrorResponses:
  #         - ErrorCode: '404'
  #           ResponsePagePath: '/index.html'
  #           ResponseCode: '200'
  #           ErrorCachingMinTTL: '30'
  #         - ErrorCode: '403'
  #           ResponsePagePath: '/index.html'
  #           ResponseCode: '200'
  #           ErrorCachingMinTTL: '30'

  # Lambda Functions S3 Bucket
  LambdaBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      MetricsConfigurations:
        - Id: LambdaBucket

  # Pipeline Artifacts S3 Bucket
  PipelineArtifactsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled

  # CodeBuild Role
  CodeBuildRole:
    Description: Creating service role in IAM for AWS CodeBuild
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${ProjectName}-codebuild-policy'
          PolicyDocument:
            Statement:
              - Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                Resource:
                  - !Join 
                    - ''
                    - - !GetAtt AssetsBucket.Arn
                      - /*
                  - !Join 
                    - ''
                    - - !GetAtt PipelineArtifactsBucket.Arn
                      - /*
                  - !Join 
                    - ''
                    - - !GetAtt LambdaBucket.Arn
                      - /*         
                Effect: Allow
        - PolicyName: !Sub "${ProjectName}-codebuild-general"
          PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'cloudfront:CreateInvalidation'                   
                  - 'iam:PassRole'                
                Resource: '*'
                Effect: Allow
      Path: /

  # CloudFormation Role
  CloudFormationRole:
    Description: Creating service role in IAM for AWS CloudFormation
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-cloudformation-role"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - cloudformation.amazonaws.com
          Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${ProjectName}-cloudformation-policies'
          PolicyDocument:
            Statement:
              - Action:                  
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                Resource: '*'                  
                Effect: Allow 
              - Action:
                  - 's3:PutObject'
                Resource: !GetAtt LambdaBucket.Arn
                Effect: Allow
              - Action:
                  - 'lambda:*'
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
                Effect: Allow
              - Action:
                  - 'apigateway:*'
                Resource: !Sub 'arn:aws:apigateway:${AWS::Region}::*'
                Effect: Allow
              - Action:
                  - 'iam:GetRole'
                  - 'iam:CreateRole'
                  - 'iam:DeleteRole'
                  - 'iam:AttachRolePolicy'
                  - 'iam:DetachRolePolicy'
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ProjectName}-*'
                Effect: Allow
              - Action:
                  - 'iam:PassRole'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 'cloudformation:CreateChangeSet'
                Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31'
                Effect: Allow
      Path: /

  # CodePipeline Role
  CodePipelineRole:
    Description: Creating service role in IAM for AWS CodePipeline
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${ProjectName}-artifacts-for-pipeline'
          PolicyDocument:
            Statement:
              - Action:
                  - 's3:PutObject'
                  - 's3:GetObject'                  
                Resource:
                  'Fn::Join':
                    - ''
                    - - 'Fn::GetAtt':
                          - PipelineArtifactsBucket
                          - Arn
                      - /*
                Effect: Allow  
        - PolicyName: !Sub '${ProjectName}-general-for-pipeline'
          PolicyDocument: 
            Statement: 
              - Action: 
                  - "iam:PassRole"
                  - 'cloudformation:*'
                  - 'cloudwatch:*'
                  - 'lambda:*'
                Resource: '*'
                Effect: Allow
        - PolicyName: !Sub '${ProjectName}-codebuild-assets-for-pipeline'
          PolicyDocument:
            Statement:
              - Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: !GetAtt 
                  - AssetsBuildProject
                  - Arn
                Effect: Allow      
        - PolicyName: !Sub '${ProjectName}-codebuild-lambdas-for-pipeline'
          PolicyDocument:
            Statement:
              - Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: !GetAtt 
                  - LambdasBuildProject
                  - Arn
                Effect: Allow

  # Assets CodeBuild Project
  AssetsBuildProject:    
    Description: Creating AWS CodeBuild for Web Assets
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: !Sub 'Building Assets stage for ${ProjectName}.'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL        
        Image: 'aws/codebuild/standard:2.0'
        Type: LINUX_CONTAINER        
      Name: !Sub '${ProjectName}-build-assets'
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE        
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 10
            pre_build:
              commands:                
                - echo Installing NPM dependencies...
                - cd assets
                - echo '{"region":"${AWS::Region}","cognito":{"userPoolId":"${UserPool}","clientId":"${UserPoolClient}","identityPoolId":"${IdentityPool}"},"gateway":{"url":"https://${AppApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"}}' > src/config.json
                - npm install fibers node-sass sass axios uuid redux typescript redux-thunk react-redux react-router-dom react-bootstrap bootstrap jquery --save
                - npm install
            build:
              commands:
                - npm run build
            post_build:
              commands:
                - echo Uploading to AssetsBucket 
                - aws s3 cp --recursive ./build s3://${AssetsBucket}/
                - aws s3 cp --cache-control="max-age=0, no-cache, no-store, must-revalidate" ./build/service-worker.js s3://${AssetsBucket}/
                - aws s3 cp --cache-control="max-age=0, no-cache, no-store, must-revalidate" ./build/index.html s3://${AssetsBucket}/                
      TimeoutInMinutes: 5

   # Functions CodeBuild Project
  LambdasBuildProject:    
    Description: Creating AWS CodeBuild for Lambda Functions
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: !Sub 'Building Lambdas stage for ${ProjectName}.'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL        
        Image: 'aws/codebuild/standard:2.0'
        Type: LINUX_CONTAINER        
      Name: !Sub '${ProjectName}-build-lambdas'
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE        
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 10
            pre_build:
              commands:                                
                - cd functions/listApartments
                - npm install
                - cd ../updateApartments
                - npm install
                - cd ../createApartments
                - npm install
                - cd ../deleteApartments
                - npm install
                - cd ../streamReader
                - npm install
                - cd ..
            build:
              commands:
                - aws cloudformation package --template-file ./functions-stack.yml --output-template-file post-functions-stack.yml --s3-bucket ${LambdaBucket}
          artifacts:
            files:
              - '**/*'
            base-directory: functions
      TimeoutInMinutes: 5

  # Project Pipeline
  ProjectCodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Sub '${ProjectName}-Pipeline'
      RoleArn: !GetAtt 
        - CodePipelineRole
        - Arn
      ArtifactStore:
        Location: !Ref PipelineArtifactsBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              InputArtifacts: []
              ActionTypeId:
                Version: '1'
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                PollForSourceChanges: true
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: !Sub '${ProjectName}-SourceArtifact'

        - Name: Build-Lambdas
          Actions:
            - Name: build-lambdas-sam
              InputArtifacts:
                - Name: !Sub '${ProjectName}-SourceArtifact'
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              OutputArtifacts:
                - Name: !Sub '${ProjectName}-Lambdas-BuildArtifact'
              Configuration:
                ProjectName: !Sub '${ProjectName}-build-lambdas'
              RunOrder: 1
            
            - Name: create-lambda-changeset
              InputArtifacts:
                - Name: !Sub '${ProjectName}-Lambdas-BuildArtifact'
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              OutputArtifacts: []
              Configuration:
                StackName: !Sub '${ProjectName}-lambdas-stack'
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !GetAtt CloudFormationRole.Arn
                ChangeSetName: !Sub '${ProjectName}-lambdas-changeset'
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: !Sub '${ProjectName}-Lambdas-BuildArtifact::post-functions-stack.yml'
                ParameterOverrides: 
                  !Sub 
                    - '{"DynamoDbRole": "${DynamoDbRole}", "ProjectName": "${ProjectName}", "AppApi": "${AppApi}", "ApiResource": "${ApartmentsApiResource}", "StreamArn": "${StreamARN}"}'
                    - { StreamARN: !GetAtt 'TBinCity.StreamArn' }

              RunOrder: 2

            - Name: execute-lambda-changeset
              InputArtifacts: []
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              OutputArtifacts: []
              Configuration:
                StackName: !Sub '${ProjectName}-lambdas-stack'
                ActionMode: CHANGE_SET_EXECUTE
                RoleArn: !GetAtt CloudFormationRole.Arn
                ChangeSetName: !Sub '${ProjectName}-lambdas-changeset'
              RunOrder: 3

        - Name: Build-Assets
          Actions:
            - Name: build-and-deploy-assets
              InputArtifacts:
                - Name: !Sub '${ProjectName}-SourceArtifact'
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              OutputArtifacts:
                - Name: !Sub '${ProjectName}-Assets-BuildArtifact'
              Configuration:
                ProjectName: !Sub '${ProjectName}-build-assets'
              RunOrder: 1             
    DependsOn:
      -  PipelineArtifactsBucket

# Outputs:  
#   WebApplication:
#     Description: The URL for the web application
#     Export:
#       Name: !Sub '${ProjectName}WebApp'
#     Value: !Sub 
#       - 'https://${Domain}'
#       - Domain: !GetAtt AssetsCDN.DomainName