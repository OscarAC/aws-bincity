AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
    ProjectName:
        Description: "Name of the Project"
        Type: "String"
    DynamoDbRole:
        Description: "DynamoDB Role ARN to assign to functions"
        Type: "String"           
    AppApi:
        Description: "Gateway API"
        Type: "String"
    ApiResource:
        Description: "API Resource"
        Type: "String"
    StreamArn:
        Description: "DynamoDB Stream ARN"
        Type: "String"
    StreamReaderRole:
        Description: "Role for the DynamoDB Stream Reader Lambda"
        Type: "String"
    TokenBucket:
        Description: "Name of the Token Bucket"
        Type: "String"
    InfluxURL:
        Description: "URL of the Influxdb Endpoint"
        Type: "String"

Resources:
  ListApartments:
    Type: AWS::Serverless::Function
    Properties:
      Handler: listApartments.handler
      CodeUri: listApartments/      
      Runtime: nodejs8.10
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${DynamoDbRole}

  ListApartmentsPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ListApartments
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*

  UpdateApartments:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updateApartments.handler
      CodeUri: updateApartments/
      Runtime: nodejs8.10
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${DynamoDbRole}

  UpdateApartmentsPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref UpdateApartments
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*

  CreateApartments:
    Type: AWS::Serverless::Function
    Properties:
      Handler: createApartments.handler
      CodeUri: createApartments/      
      Runtime: nodejs8.10
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${DynamoDbRole}

  CreateApartmentsPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref CreateApartments
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*

  DeleteApartments:
    Type: AWS::Serverless::Function
    Properties:
      Handler: deleteApartments.handler
      CodeUri: deleteApartments/      
      Runtime: nodejs8.10
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${DynamoDbRole}

  DeleteApartmentsPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref DeleteApartments
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*

  ApartmentsApiRequestGET:
    DependsOn:
      - ListApartmentsPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - ListApartments
              - Arn              
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref ApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  ApartmentsApiRequestPUT:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: PUT
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - UpdateApartments
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      RequestParameters:
        method.request.path.id: true
      ResourceId: !Ref ApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  
  ApartmentsApiRequestPOST:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - CreateApartments
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      RequestParameters:
        method.request.path.id: true
      ResourceId: !Ref ApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  
  ApartmentsApiRequestDELETE:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: DELETE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - DeleteApartments
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      RequestParameters:
        method.request.path.id: true
      ResourceId: !Ref ApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  ApartmentsApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref ApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'

  APIDeployment:
    DependsOn:
      - ApartmentsApiRequestGET      
      - ApartmentsApiRequestPOST
      - ApartmentsApiRequestGET
      - ApartmentsApiRequestDELETE
      - ApartmentsApiRequestOPTIONS
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      Description: Prod deployment for API
      RestApiId: !Ref AppApi
      StageName: prod

  StreamReader:
    Type: AWS::Serverless::Function
    Properties:
      Handler: streamReader.handler
      CodeUri: streamReader/
      Runtime: nodejs8.10
      Environment:
        Variables:
          tokenBucketName: !Ref TokenBucket
          influxUrl: !Ref InfluxURL
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${StreamReaderRole}

  DataTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 100
      Enabled: True
      EventSourceArn: !Ref StreamArn
      FunctionName: !GetAtt StreamReader.Arn
      StartingPosition: LATEST